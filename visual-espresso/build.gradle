// Top-level build file where you can add configuration options common to all sub-projects/modules.
plugins {
    alias(libs.plugins.android.application) apply false
    alias(libs.plugins.android.library) apply false
    alias(libs.plugins.gradle.nexus.publish)
}

nexusPublishing {
    repositories {
        sonatype {
            nexusUrl = uri("https://oss.sonatype.org/service/local/staging/deploy/maven2/")
            snapshotRepositoryUrl = uri("https://oss.sonatype.org/content/repositories/snapshots/")
            username = project.findProperty("ossrhUsername") ?: System.getenv("OSSRH_USERNAME")
            password = project.findProperty("ossrhPassword") ?: System.getenv("OSSRH_PASSWORD")
        }
    }
}

group = "com.saucelabs.visual.visual-espresso"
version = "0.0.0"

tasks.register('bumpVersion') {
    doLast {
        def releaseType = project.hasProperty("releaseType") ? project.releaseType : null
        if (!releaseType) {
            throw new GradleException("Please provide a release type using -PreleaseType=<major|minor|patch>")
        }

        def newVersion = calculateNewVersion(version, releaseType)
        persistNewVersion(newVersion)

        println "$newVersion"
    }
}

static def calculateNewVersion(currentVersion, releaseType) {
    def versionParts = currentVersion.split('\\.').collect { it.toInteger() }
    if (versionParts.size() != 3) {
        throw new GradleException("Invalid versionName format: $currentVersion. Expected format: MAJOR.MINOR.PATCH")
    }

    def (major, minor, patch) = versionParts
    switch (releaseType) {
        case "major":
            major++
            minor = 0
            patch = 0
            break
        case "minor":
            minor++
            patch = 0
            break
        case "patch":
            patch++
            break
        default:
            throw new GradleException("Unknown release type: $releaseType. Use 'major', 'minor', or 'patch'.")
    }

    return "$major.$minor.$patch"
}

def persistNewVersion(newVersion) {
    def buildFile = file("build.gradle")
    def buildFileContent = buildFile.text.replaceAll(/version\s*=\s*["'].*?["']/, "version = \"$newVersion\"")
    buildFile.text = buildFileContent
}
