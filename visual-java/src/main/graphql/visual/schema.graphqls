schema {
  mutation: Mutation
  query: Query
}

input AddCommentIn {
  action: CommentAction
  comment: String!
  diffId: UUID!
}

type ApplicationSummary {
  id: String!
  name: String!
  version: String!
}

input ApproveBuildIn {
  id: UUID
  onlyNew: Boolean

  """@deprecated Use `id`. This field will be removed in a future update."""
  uuid: UUID
}

"""
A `Baseline` is what a `Snapshot` is compared to.

For details see https://docs.saucelabs.com/visual-testing/sauce-visual/index.html#baseline-matching
"""
type Baseline implements Node {
  appId: String
  appName: String
  appVersion: String
  branch: String
  browser: Browser!
  browserVersion: String
  createdAt: Datetime!
  createdByOrgId: UUID!
  createdByUser: User!
  createdByUserId: UUID!
  device: String
  devicePixelRatio: Float

  """Reads and enables pagination through a set of `Diff`."""
  diffs(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: DiffCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: DiffFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Diff`."""
    orderBy: [DiffsOrderBy!] = [PRIMARY_KEY_ASC]
  ): DiffsConnection!
  domFormat: DomFormat!
  hasDom: Boolean!
  height: Int
  id: UUID!
  ignoreRegions: [Region]!
  imageUrl: String!
  isLatest: Boolean!
  latest: Baseline!
  metadata: JSON
  name: String!

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  operatingSystem: OperatingSystem!
  operatingSystemVersion: String
  parentId: UUID
  project: String
  smartSuiteName: String!
  smartTestName: String!

  """Reads a single `Snapshot` that is related to this `Baseline`."""
  snapshot: Snapshot
  snapshotId: UUID
  suiteName: String
  testName: String
  thumbnailUrl: String!
  uiIgnoreRegions: [Region]!
  uploadId: String!
  userAgent: String
  viewportHeight: Int
  viewportWidth: Int
  width: Int
}

"""
A condition to be used against `Baseline` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input BaselineCondition {
  """Checks for equality with the object’s `branch` field."""
  branch: String

  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `createdByOrgId` field."""
  createdByOrgId: UUID

  """Checks for equality with the object’s `createdByUserId` field."""
  createdByUserId: UUID

  """Checks for equality with the object’s `id` field."""
  id: UUID

  """Checks for equality with the object’s `project` field."""
  project: String

  """Checks for equality with the object’s `snapshotId` field."""
  snapshotId: UUID
}

"""
A filter to be used against `Baseline` object types. All fields are combined with a logical ‘and.’
"""
input BaselineFilter {
  """Filter by the object’s `branch` field."""
  branch: StringFilter

  """Filter by the object’s `createdAt` field."""
  createdAt: DatetimeFilter

  """Filter by the object’s `createdByOrgId` field."""
  createdByOrgId: UUIDFilter

  """Filter by the object’s `createdByUserId` field."""
  createdByUserId: UUIDFilter

  """Filter by the object’s `id` field."""
  id: UUIDFilter

  """Filter by the object’s `project` field."""
  project: StringFilter

  """Filter by the object’s `snapshotId` field."""
  snapshotId: UUIDFilter
}

"""
One or more values from 'SnapshotIn' we should use as an override when finding a baseline.
"""
input BaselineOverrideIn {
  browser: Browser
  browserVersion: String
  device: String
  name: String
  operatingSystem: OperatingSystem
  operatingSystemVersion: String
  suiteName: String
  testName: String
}

"""A connection to a list of `Baseline` values."""
type BaselinesConnection {
  """
  A list of edges which contains the `Baseline` and cursor to aid in pagination.
  """
  edges: [BaselinesEdge!]!

  """A list of `Baseline` objects."""
  nodes: [Baseline!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Baseline` you could get from the connection."""
  totalCount: Int!
}

"""A `Baseline` edge in the connection."""
type BaselinesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Baseline` at the end of the edge."""
  node: Baseline!
}

"""Methods to use when ordering `Baseline`."""
enum BaselinesOrderBy {
  BRANCH_ASC
  BRANCH_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  CREATED_BY_ORG_ID_ASC
  CREATED_BY_ORG_ID_DESC
  CREATED_BY_USER_ID_ASC
  CREATED_BY_USER_ID_DESC
  ID_ASC
  ID_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  PROJECT_ASC
  PROJECT_DESC
  SNAPSHOT_ID_ASC
  SNAPSHOT_ID_DESC
}

type Branch implements Node {
  baselines(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: BaselineCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: BaselineFilter
    filters: SnapshotFiltersIn

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Baseline`."""
    orderBy: [BaselinesOrderBy!] = [PRIMARY_KEY_ASC]
  ): BaselinesConnection!

  """Returns the differents values availables for attributes."""
  distinctAttributeValues: DistinctAttributeValues!
  id: String!
  lastUsed: Datetime!
  name: String

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!

  """Reads a single `Project` that is related to this `Branch`."""
  project: Project
  projectId: String!
}

"""A connection to a list of `Branch` values."""
type BranchesConnection {
  """
  A list of edges which contains the `Branch` and cursor to aid in pagination.
  """
  edges: [BranchesEdge!]!

  """A list of `Branch` objects."""
  nodes: [Branch!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Branch` you could get from the connection."""
  totalCount: Int!
}

"""A `Branch` edge in the connection."""
type BranchesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Branch` at the end of the edge."""
  node: Branch!
}

"""Methods to use when ordering `Branch`."""
enum BranchesOrderBy {
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

enum Browser {
  CHROME
  EDGE
  FIREFOX
  NONE
  PLAYWRIGHT_WEBKIT
  SAFARI
}

"""The result of diffing a `Baseline` with a `Snapshot`."""
type Build implements Node {
  branch: String
  commentCount: Int
  createdAt: Datetime!
  createdByOrgId: UUID!
  createdByUser: User!
  createdByUserId: UUID!

  """
  User provided id for a build.
  
  Use `buildByCustomId` to look up a build by its `customId`.
  
  Properties:
  - up to 64 bytes (try to stick to ASCII characters)
  - in case of colissions, the latest build is returned
  - collissions may hurt query performance
  
  Recommendations:
  - generate the id from the CI pipeline link by applying a hashing function
  - prefix/postfix the id with a team id to avoid collisions with other teams, e.g. `sha512(teamId + ':' + url)`
  """
  customId: String
  defaultBranch: String
  diffCount(status: DiffStatus!): Int! @deprecated(reason: "Use diffCountExtended. This will be removed by 2024-02-11.")

  """
  Returns the number of diffs in a build that have a specific status.
  
  E.g. to get the number of "new" snapshots use `{ status: UNAPPROVED, withBaseline: false}`
  """
  diffCountExtended(input: DiffCountIn!): Int!

  """Reads and enables pagination through a set of `Diff`."""
  diffs(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: DiffCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: DiffFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Diff`."""
    orderBy: [DiffsOrderBy!] = [PRIMARY_KEY_ASC]
  ): DiffsConnection!
  diffsPaginated(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: DiffCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: DiffFilter
    filters: DiffFiltersIn

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Diff`."""
    orderBy: [DiffsOrderBy!] = [PRIMARY_KEY_ASC]
  ): DiffsConnection!

  """Returns the differents values availables for attributes."""
  distinctAttributeValues: DistinctAttributeValues!

  """
  If not null, it indicates that the build encountered an error.
  
  By convention, the following errors exist:
  - `{"code": "TIMEOUT"}`: The build timed out, because `finishBuild` was not called.
  - `{"code": "DIFF_TIMEOUT"}`: At least one diff could not be computed within the time limit.
  
  Other error types may exist and the frontend should display a generic error message
  together with the JSON contents of `error`.
  """
  error: JSON
  finishAfter: Datetime

  """Full-text search ranking when filtered by `fullText`."""
  fullTextRank: Float
  id: UUID!
  keepAliveTimeout: Int
  mode: BuildMode!
  name: String!

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  openSessions: Int
  owningTeamId: UUID!
  project: String

  """Reads and enables pagination through a set of `Snapshot`."""
  snapshots(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SnapshotCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: SnapshotFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Snapshot`."""
    orderBy: [SnapshotsOrderBy!] = [PRIMARY_KEY_ASC]
  ): SnapshotsConnection!
  status: BuildStatus!
  url: String!
}

"""
A condition to be used against `Build` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input BuildCondition {
  """Checks for equality with the object’s `branch` field."""
  branch: String

  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `createdByOrgId` field."""
  createdByOrgId: UUID

  """Checks for equality with the object’s `createdByUserId` field."""
  createdByUserId: UUID

  """Checks for equality with the object’s `fullText` field."""
  fullText: FullText

  """Checks for equality with the object’s `id` field."""
  id: UUID

  """Checks for equality with the object’s `owningTeamId` field."""
  owningTeamId: UUID

  """Checks for equality with the object’s `project` field."""
  project: String

  """Checks for equality with the object’s `status` field."""
  status: BuildStatus
}

"""
A filter to be used against `Build` object types. All fields are combined with a logical ‘and.’
"""
input BuildFilter {
  """Filter by the object’s `branch` field."""
  branch: StringFilter

  """Filter by the object’s `createdAt` field."""
  createdAt: DatetimeFilter

  """Filter by the object’s `createdByOrgId` field."""
  createdByOrgId: UUIDFilter

  """Filter by the object’s `createdByUserId` field."""
  createdByUserId: UUIDFilter

  """Filter by the object’s `fullText` field."""
  fullText: FullTextFilter

  """Filter by the object’s `id` field."""
  id: UUIDFilter

  """Filter by the object’s `owningTeamId` field."""
  owningTeamId: UUIDFilter

  """Filter by the object’s `project` field."""
  project: StringFilter

  """Filter by the object’s `status` field."""
  status: BuildStatusFilter
}

input BuildIn {
  branch: String
  customId: String
  defaultBranch: String

  """
  A positive integer that is the time in seconds that the Build is allowed to be in the RUNNING state after the last snapshot was created or updated.
  The number clipped to the interval [1;86400].
  """
  keepAliveTimeout: Int
  name: String
  project: String
}

enum BuildMode {
  COMPLETED
  RUNNING
}

"""
Lifecycle status of a `Build`.

1. A new `Build` is always in `RUNNING` state.
2. When the `finishBuild` mutation was called, its state is as follows:
   - `ERRORED` if build.error is not null or else
   - `EMPTY` if there are no Diffs in the Build or else
   - `RUNNING` if any Diff in the Build is QUEUED or else
   - `ERRORED` if any Diff in the Build is ERRORED or else
   - `UNAPPROVED` if any Diff in the Build is UNAPPROVED or else
   - `REJECTED` if any Diff in the Build is REJECTED or else
   - `APPROVED` if any Diff in the Build is APPROVED and
   - `EQUAL` in any other case

When `finishBuild` is not called, the build will time out and end up in the `ERRORED` state.
"""
enum BuildStatus {
  APPROVED
  EMPTY
  EQUAL
  ERRORED
  QUEUED
  REJECTED
  RUNNING
  UNAPPROVED
}

"""
A filter to be used against BuildStatus fields. All fields are combined with a logical ‘and.’
"""
input BuildStatusFilter {
  """Greater than the specified value."""
  greaterThan: BuildStatus

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: BuildStatus

  """Included in the specified list."""
  in: [BuildStatus!]

  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Less than the specified value."""
  lessThan: BuildStatus

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: BuildStatus
}

"""A connection to a list of `Build` values."""
type BuildsConnection {
  """
  A list of edges which contains the `Build` and cursor to aid in pagination.
  """
  edges: [BuildsEdge!]!

  """A list of `Build` objects."""
  nodes: [Build!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Build` you could get from the connection."""
  totalCount: Int!
}

"""A `Build` edge in the connection."""
type BuildsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Build` at the end of the edge."""
  node: Build!
}

"""Methods to use when ordering `Build`."""
enum BuildsOrderBy {
  BRANCH_ASC
  BRANCH_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  CREATED_BY_ORG_ID_ASC
  CREATED_BY_ORG_ID_ASC__CUSTOM_ID_ASC
  CREATED_BY_ORG_ID_DESC
  CREATED_BY_ORG_ID_DESC__CUSTOM_ID_DESC
  CREATED_BY_USER_ID_ASC
  CREATED_BY_USER_ID_DESC
  ID_ASC
  ID_DESC
  NATURAL
  OWNING_TEAM_ID_ASC
  OWNING_TEAM_ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  PROJECT_ASC
  PROJECT_DESC
  STATUS_ASC
  STATUS_DESC
}

type Comment implements Node {
  action: CommentAction
  comment: String!
  createdAt: Datetime!
  createdByOrgId: UUID!
  createdByUser: User!
  createdByUserId: UUID!

  """Reads a single `Diff` that is related to this `Comment`."""
  diff: Diff
  diffId: UUID!
  id: UUID!

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  updatedAt: Datetime
}

enum CommentAction {
  APPROVED
  REJECTED
  UNAPPROVED
  UNREJECTED
}

"""
A condition to be used against `Comment` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input CommentCondition {
  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `diffId` field."""
  diffId: UUID

  """Checks for equality with the object’s `id` field."""
  id: UUID
}

"""
A filter to be used against `Comment` object types. All fields are combined with a logical ‘and.’
"""
input CommentFilter {
  """Filter by the object’s `createdAt` field."""
  createdAt: DatetimeFilter

  """Filter by the object’s `diffId` field."""
  diffId: UUIDFilter

  """Filter by the object’s `id` field."""
  id: UUIDFilter
}

"""A connection to a list of `Comment` values."""
type CommentsConnection {
  """
  A list of edges which contains the `Comment` and cursor to aid in pagination.
  """
  edges: [CommentsEdge!]!

  """A list of `Comment` objects."""
  nodes: [Comment!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Comment` you could get from the connection."""
  totalCount: Int!
}

"""A `Comment` edge in the connection."""
type CommentsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Comment` at the end of the edge."""
  node: Comment!
}

"""Methods to use when ordering `Comment`."""
enum CommentsOrderBy {
  CREATED_AT_ASC
  CREATED_AT_DESC
  DIFF_ID_ASC
  DIFF_ID_DESC
  ID_ASC
  ID_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

input CreateDerivedBaselinesIn {
  baselineIds: [UUID!]!
  onlyApplyIfIsLatest: Boolean
  uiIgnoreRegions: [RegionIn!]
}

input CreateSnapshotFromWebDriverIn {
  """
  One or more overrides for locating the matching baseline. Can be used for cross browser / OS
  visual testing.
  """
  baselineOverride: BaselineOverrideIn
  buildId: UUID

  """
  @deprecated Use `buildId`. This field will be removed in a future update.
  """
  buildUuid: UUID
  captureDom: Boolean

  """The selenium ID of an element we should clip the screen to."""
  clipElement: WebdriverElementID

  """@deprecated(reason: "clipElement should be used instead.")"""
  clipSelector: String
  diffingMethod: DiffingMethod
  diffingOptions: DiffingOptionsIn

  """
  Enable full page screenshot using scroll-and-stitch strategy.
  Limitation: Currently, this feature is supported only on desktop browsers.
  """
  fullPageConfig: FullPageConfigIn
  ignoreElements: [ElementIn!]
  ignoreRegions: [RegionIn!]
  ignoreSelectors: [IgnoreSelectorIn!]

  """This will be mandatory in the future."""
  jobId: String
  name: String!
  sessionId: ID!

  """Pass the `blob` field from the `webdriverSessionInfo` query here."""
  sessionMetadata: WebdriverSessionBlob!
  suiteName: String
  testName: String
}

"""A location in a connection that can be used for resuming pagination."""
scalar Cursor

"""
A point in time as described by the [ISO
8601](https://en.wikipedia.org/wiki/ISO_8601) standard. May or may not include a timezone.
"""
scalar Datetime

"""
A filter to be used against Datetime fields. All fields are combined with a logical ‘and.’
"""
input DatetimeFilter {
  """Greater than the specified value."""
  greaterThan: Datetime

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: Datetime

  """Included in the specified list."""
  in: [Datetime!]

  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Less than the specified value."""
  lessThan: Datetime

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: Datetime
}

input DeleteCommentIn {
  id: UUID!
}

"""
The result of diffing a `Baseline` with a `Snapshot`.

See the documentation for `Baseline` for details how a `Snapshot` is matched to `Baseline`.
"""
type Diff implements Node {
  altDomDiffUrl: String @deprecated(reason: "Experimental. May be removed at any time.")

  """Reads a single `Baseline` that is related to this `Diff`."""
  baseline: Baseline
  baselineId: UUID

  """Reads a single `Build` that is related to this `Diff`."""
  build: Build
  buildId: UUID!

  """Reads and enables pagination through a set of `Comment`."""
  comments(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CommentCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CommentFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Comment`."""
    orderBy: [CommentsOrderBy!] = [PRIMARY_KEY_ASC]
  ): CommentsConnection!
  createdAt: Datetime!
  diffBounds: Rect
  diffClusters: [Rect]!
  diffingMethod: DiffingMethod!

  """snapshot { uploadId } should be requested at the same moment"""
  domDiffUrl: String
  feedback: DiffFeedback!
  hasDom: Boolean!
  id: UUID!

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  options: DiffingOption
  preview(input: DiffPreviewIn!): [Rect!]!

  """Reads a single `Snapshot` that is related to this `Diff`."""
  snapshot: Snapshot
  snapshotId: UUID!
  status: DiffStatus!
  statusIsEqual: Boolean

  """
  Last time the diff was updated.
  
  By default `updatedAt = createdAt`.
  """
  updatedAt: Datetime!

  """
  User id of user that last updated the diff. If no user updated the status yet, it is set to `created_by`.
  """
  updatedBy: UUID!
  updatedByUser: User!
}

"""
A condition to be used against `Diff` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input DiffCondition {
  """Checks for equality with the object’s `baselineId` field."""
  baselineId: UUID

  """Checks for equality with the object’s `buildId` field."""
  buildId: UUID

  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `id` field."""
  id: UUID

  """Checks for equality with the object’s `snapshotId` field."""
  snapshotId: UUID

  """Checks for equality with the object’s `status` field."""
  status: DiffStatus
}

input DiffCountIn {
  status: DiffStatus!

  """Set to true to only count diffs that have a baseline."""
  withBaseline: Boolean
}

type DiffFeedback {
  hasIrrelevantChanges: Boolean!
  isBroken: Boolean!
}

"""A connection to a list of `DiffFeedback` values."""
type DiffFeedbacksConnection {
  """
  A list of edges which contains the `DiffFeedback` and cursor to aid in pagination.
  """
  edges: [DiffFeedbacksEdge!]!

  """A list of `DiffFeedback` objects."""
  nodes: [DiffFeedback!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `DiffFeedback` you could get from the connection."""
  totalCount: Int!
}

"""A `DiffFeedback` edge in the connection."""
type DiffFeedbacksEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `DiffFeedback` at the end of the edge."""
  node: DiffFeedback!
}

"""Methods to use when ordering `DiffFeedback`."""
enum DiffFeedbacksOrderBy {
  NATURAL
}

"""
A filter to be used against `Diff` object types. All fields are combined with a logical ‘and.’
"""
input DiffFilter {
  """Filter by the object’s `baselineId` field."""
  baselineId: UUIDFilter

  """Filter by the object’s `buildId` field."""
  buildId: UUIDFilter

  """Filter by the object’s `createdAt` field."""
  createdAt: DatetimeFilter

  """Filter by the object’s `id` field."""
  id: UUIDFilter

  """Filter by the object’s `snapshotId` field."""
  snapshotId: UUIDFilter

  """Filter by the object’s `status` field."""
  status: DiffStatusFilter
}

"""
Extension of SnapshotFiltersIn. Should contain the same values here in addition to status filters.
"""
input DiffFiltersIn {
  browser: [Browser!]
  device: [String!]
  groupBy: [GroupByOption!]
  operatingSystem: [OperatingSystemFilterIn!]
  search: String
  status: [DiffStatus!]
}

input DiffPreviewIn {
  ignoreRegions: [RegionIn!]!
}

"""
Lifecycle status of a `Diff`.

1. When a `Diff` is created from a `Snapshot` it will be `QUEUED`.
2. After the difference between snapshot and baseline was computed, the state is either
    `EQUAL` (`Baseline` and snapshot are equal) or
    `UNAPPROVED` (differences between `Baseline` and `Snapshot` were detected or no `Baseline` exists).
3. A user can update the status of an existing `Diff` to either
    `APPROVED` (a new `Baseline` is then created from the `Snapshot`)
    `REJECTED` (no new `Baseline` is created)
    `UNAPPROVED` (if it was approved before, the previous `Baseline` is restored)
"""
enum DiffStatus {
  APPROVED
  EQUAL
  ERRORED
  QUEUED
  REJECTED
  UNAPPROVED
}

"""
A filter to be used against DiffStatus fields. All fields are combined with a logical ‘and.’
"""
input DiffStatusFilter {
  """Greater than the specified value."""
  greaterThan: DiffStatus

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: DiffStatus

  """Included in the specified list."""
  in: [DiffStatus!]

  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Less than the specified value."""
  lessThan: DiffStatus

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: DiffStatus
}

"""
Method to use for diffing.

SIMPLE is the default.

Note: EXPERIMENTAL is deprecated. Use BALANCED instead.
"""
enum DiffingMethod {
  BALANCED
  EXPERIMENTAL
  SIMPLE
}

type DiffingOption {
  content: Boolean
  dimensions: Boolean
  position: Boolean
  structure: Boolean
  style: Boolean
  visual: Boolean
}

input DiffingOptionsIn {
  content: Boolean
  dimensions: Boolean
  position: Boolean
  structure: Boolean
  style: Boolean
  visual: Boolean
}

"""A connection to a list of `Diff` values."""
type DiffsConnection {
  """
  A list of edges which contains the `Diff` and cursor to aid in pagination.
  """
  edges: [DiffsEdge!]!

  """A list of `Diff` objects."""
  nodes: [Diff!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Diff` you could get from the connection."""
  totalCount: Int!
}

"""A `Diff` edge in the connection."""
type DiffsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Diff` at the end of the edge."""
  node: Diff!
}

"""Methods to use when ordering `Diff`."""
enum DiffsOrderBy {
  BASELINE_ID_ASC
  BASELINE_ID_DESC
  BUILD_ID_ASC
  BUILD_ID_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  ID_ASC
  ID_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  SNAPSHOT_ID_ASC
  SNAPSHOT_ID_DESC
  STATUS_ASC
  STATUS_DESC
  STATUS_IS_EQUAL_ASC
  STATUS_IS_EQUAL_DESC
}

type DistinctAttributeValues {
  browser: [Browser]!
  device: [String]!
  operatingSystem: [OperatingSystemAttribute!]!
  storybookDepth1: [String]!
  storybookDepth2: [String]!
  suiteName: [String]!
  testName: [String]!
}

enum DomFormat {
  ANDROID_APPIUM
  BROWSER
  IOS_APPIUM
  NONE
}

input ElementIn {
  diffingOptions: DiffingOptionsIn

  """The server-assigned ID of an element from webdriver."""
  id: WebdriverElementID!
  name: String
}

input FinishBuildIn {
  customId: String

  """
  Delay the finishing the build for at least the specified number of seconds.
  """
  delay: Int

  """@deprecated Use `uuid`. This field will be removed in a future update."""
  id: ID
  uuid: UUID
}

input ForceFinishBuildIn {
  customId: String
  uuid: UUID
}

input FullPageConfigIn {
  """
  Delay in ms after scrolling and before taking screenshots.
  A slight delay can be helpful if the page is using lazy loading when scrolling
  """
  delayAfterScrollMs: Int

  """Disable CSS animations and the input caret in the app."""
  disableCSSAnimation: Boolean

  """@deprecated Use hideElementsAfterFirstScroll instead where available."""
  hideAfterFirstScroll: [String]

  """
  Hide elements on the page after first scroll using their server-assigned ID from webdriver.
  """
  hideElementsAfterFirstScroll: [WebdriverElementID!]

  """Hide all scrollbars in the app."""
  hideScrollBars: Boolean

  """
  Selector of an element that we should crop the screenshot to. Available only on native apps.
  """
  nativeClipSelector: SelectorIn

  """
  @experimental Element used for scrolling (available only in native apps)
  """
  scrollElement: WebdriverElementID

  """
  Limit the number of screenshots taken for scrolling and stitching.
  Default and max value is 10
  """
  scrollLimit: Int

  """
  Change scroll behaviour before and after taking full page screenshot. Available only on native apps.
  """
  scrollOption: ScrollOption
}

scalar FullText

"""
A filter to be used against FullText fields. All fields are combined with a logical ‘and.’
"""
input FullTextFilter {
  """Performs a full text search on the field."""
  matches: String
}

enum GroupByOption {
  Browser
  Device
  OperatingSystem_OperatingSystemVersion
  SmartSuiteName
  SmartTestName
  SuiteName
  TestName
}

input IgnoreSelectorIn {
  diffingOptions: DiffingOptionsIn
  name: String
  selector: SelectorIn!
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

"""All input for the `mergeBaselines` mutation."""
input MergeBaselinesInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  projectName: String!
  sourceBranch: String!
  targetBranch: String!
}

"""The output of our `mergeBaselines` mutation."""
type MergeBaselinesPayload {
  baselines: [Baseline!]

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""
The root mutation type which contains root level fields which mutate data.
"""
type Mutation {
  addComment(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: AddCommentIn!
  ): Comment!
  approveBuild(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: ApproveBuildIn!
  ): Build! @deprecated(reason: "Use setDiffStatus")
  createBuild(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: BuildIn!
  ): Build!

  """
  Copy a set of baselines specified by `baselineIds` and save it as the latest baseline, but
  replace uiIgnoreRegions with the provided value.
  """
  createDerivedBaselines(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateDerivedBaselinesIn!
  ): [Baseline!]!
  createSnapshot(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: SnapshotIn!
  ): Snapshot!
  createSnapshotFromWebDriver(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateSnapshotFromWebDriverIn!
  ): Snapshot!
  createSnapshotUpload(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: SnapshotUploadIn!
  ): SnapshotUpload!
  deleteComment(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteCommentIn!
  ): Void
  finishBuild(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: FinishBuildIn!
  ): Build!
  forceFinishBuild(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: ForceFinishBuildIn!
  ): Build
  mergeBaselines(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: MergeBaselinesInput!
  ): MergeBaselinesPayload!
  setDiffFeedback(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: SetDiffFeedbackIn!
  ): Diff!
  setDiffStatus(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: SetDiffStatusIn!
  ): [Diff!]!
  updateComment(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateCommentIn!
  ): Comment!
  updateDiff(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateDiffIn!
  ): Diff! @deprecated(reason: "Use setDiffStatus")
}

"""An object with a globally unique `ID`."""
interface Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
}

enum OperatingSystem {
  ANDROID
  IOS
  LINUX
  MACOS
  UNKNOWN
  WINDOWS
}

type OperatingSystemAttribute {
  name: OperatingSystem
  version: String
}

input OperatingSystemFilterIn {
  name: OperatingSystem!
  version: String!
}

type Org {
  id: UUID

  """Reads and enables pagination through a set of `OrgStat`."""
  orgStats(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: OrgStatCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: OrgStatFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `OrgStat`."""
    orderBy: [OrgStatsOrderBy!] = [PRIMARY_KEY_ASC]
  ): OrgStatsConnection!
  statsGroupedByDay(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
  ): OrgStatsGroupedByDayConnection!
}

type OrgStat implements Node {
  hour: Datetime!

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!

  """Reads a single `Org` that is related to this `OrgStat`."""
  org: Org
  orgId: UUID!
  snapshotsUsed: Int!
}

"""
A condition to be used against `OrgStat` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input OrgStatCondition {
  """Checks for equality with the object’s `orgId` field."""
  orgId: UUID
}

"""
A filter to be used against `OrgStat` object types. All fields are combined with a logical ‘and.’
"""
input OrgStatFilter {
  """Filter by the object’s `orgId` field."""
  orgId: UUIDFilter
}

"""A connection to a list of `OrgStat` values."""
type OrgStatsConnection {
  """
  A list of edges which contains the `OrgStat` and cursor to aid in pagination.
  """
  edges: [OrgStatsEdge!]!

  """A list of `OrgStat` objects."""
  nodes: [OrgStat!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `OrgStat` you could get from the connection."""
  totalCount: Int!
}

"""A `OrgStat` edge in the connection."""
type OrgStatsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `OrgStat` at the end of the edge."""
  node: OrgStat!
}

"""A connection to a list of `OrgStatsGroupedByDayRecord` values."""
type OrgStatsGroupedByDayConnection {
  """
  A list of edges which contains the `OrgStatsGroupedByDayRecord` and cursor to aid in pagination.
  """
  edges: [OrgStatsGroupedByDayEdge!]!

  """A list of `OrgStatsGroupedByDayRecord` objects."""
  nodes: [OrgStatsGroupedByDayRecord!]!

  """
  The count of *all* `OrgStatsGroupedByDayRecord` you could get from the connection.
  """
  totalCount: Int!
}

"""A `OrgStatsGroupedByDayRecord` edge in the connection."""
type OrgStatsGroupedByDayEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `OrgStatsGroupedByDayRecord` at the end of the edge."""
  node: OrgStatsGroupedByDayRecord!
}

"""The return type of our `statsGroupedByDay` query."""
type OrgStatsGroupedByDayRecord {
  day: Datetime
  snapshotsUsed: Int
}

"""Methods to use when ordering `OrgStat`."""
enum OrgStatsOrderBy {
  NATURAL
  ORG_ID_ASC
  ORG_ID_ASC__HOUR_ASC
  ORG_ID_DESC
  ORG_ID_DESC__HOUR_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, the cursor to continue."""
  endCursor: Cursor

  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: Cursor
}

type Project implements Node {
  """Reads and enables pagination through a set of `Branch`."""
  branches(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Branch`."""
    orderBy: [BranchesOrderBy!] = [PRIMARY_KEY_ASC]
  ): BranchesConnection! @deprecated(reason: "Experimental API, could change at any time. Use with caution.")
  id: String!
  lastUsed: Datetime!
  name: String

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
}

"""A connection to a list of `Project` values."""
type ProjectsConnection {
  """
  A list of edges which contains the `Project` and cursor to aid in pagination.
  """
  edges: [ProjectsEdge!]!

  """A list of `Project` objects."""
  nodes: [Project!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Project` you could get from the connection."""
  totalCount: Int!
}

"""A `Project` edge in the connection."""
type ProjectsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Project` at the end of the edge."""
  node: Project!
}

"""Methods to use when ordering `Project`."""
enum ProjectsOrderBy {
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""The root query type which gives access points into the data universe."""
type Query implements Node {
  baseline(id: UUID!): Baseline

  """Reads a single `Baseline` using its globally unique `ID`."""
  baselineByNodeId(
    """The globally unique `ID` to be used in selecting a single `Baseline`."""
    nodeId: ID!
  ): Baseline

  """Reads and enables pagination through a set of `Baseline`."""
  baselineHistory(
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    baselineId: UUID!

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
  ): BaselinesConnection

  """Reads and enables pagination through a set of `Baseline`."""
  baselines(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: BaselineCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: BaselineFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Baseline`."""
    orderBy: [BaselinesOrderBy!] = [PRIMARY_KEY_ASC]
  ): BaselinesConnection
  branch(id: String!, projectId: String!): Branch

  """Reads a single `Branch` using its globally unique `ID`."""
  branchByNodeId(
    """The globally unique `ID` to be used in selecting a single `Branch`."""
    nodeId: ID!
  ): Branch @deprecated(reason: "Experimental API, could change at any time. Use with caution.")

  """Reads and enables pagination through a set of `Branch`."""
  branches(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Branch`."""
    orderBy: [BranchesOrderBy!] = [PRIMARY_KEY_ASC]
  ): BranchesConnection @deprecated(reason: "Experimental API, could change at any time. Use with caution.")
  build(id: UUID!): Build
  buildByCustomId(customId: String!): Build

  """Reads a single `Build` using its globally unique `ID`."""
  buildByNodeId(
    """The globally unique `ID` to be used in selecting a single `Build`."""
    nodeId: ID!
  ): Build

  """Reads and enables pagination through a set of `Build`."""
  builds(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: BuildCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: BuildFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Build`."""
    orderBy: [BuildsOrderBy!] = [PRIMARY_KEY_ASC]
  ): BuildsConnection
  comment(id: UUID!): Comment

  """Reads a single `Comment` using its globally unique `ID`."""
  commentByNodeId(
    """The globally unique `ID` to be used in selecting a single `Comment`."""
    nodeId: ID!
  ): Comment

  """Reads and enables pagination through a set of `Comment`."""
  comments(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CommentCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CommentFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Comment`."""
    orderBy: [CommentsOrderBy!] = [PRIMARY_KEY_ASC]
  ): CommentsConnection
  diff(id: UUID!): Diff

  """Reads a single `Diff` using its globally unique `ID`."""
  diffByNodeId(
    """The globally unique `ID` to be used in selecting a single `Diff`."""
    nodeId: ID!
  ): Diff

  """Reads and enables pagination through a set of `DiffFeedback`."""
  diffFeedbacks(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `DiffFeedback`."""
    orderBy: [DiffFeedbacksOrderBy!] = [NATURAL]
  ): DiffFeedbacksConnection

  """Reads and enables pagination through a set of `Diff`."""
  diffs(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: DiffCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: DiffFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Diff`."""
    orderBy: [DiffsOrderBy!] = [PRIMARY_KEY_ASC]
  ): DiffsConnection

  """
  List all the build branches that are visible to the current user and that include `filtername`.
  
  Results are limited to 100 entries.
  """
  filteredBranches(filtername: String): [String!]!

  """
  List all the build projects that are visible to the current user and that include `filtername`.
  
  Results are limited to 100 entries.
  """
  filteredProjects(filtername: String): [String!]!
  jwtOrgId: UUID
  jwtTeamId: UUID
  jwtUserId: UUID

  """Reads and enables pagination through a set of `Baseline`."""
  latestBaselines(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor
    branchName: String

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    projectName: String
  ): BaselinesConnection!

  """Fetches an object given its globally unique `ID`."""
  node(
    """The globally unique `ID`."""
    nodeId: ID!
  ): Node

  """
  The root query type must be a `Node` to work well with Relay 1 mutations. This just resolves to `query`.
  """
  nodeId: ID!
  org: Org
  orgStat(hour: Datetime!, orgId: UUID!): OrgStat

  """Reads a single `OrgStat` using its globally unique `ID`."""
  orgStatByNodeId(
    """The globally unique `ID` to be used in selecting a single `OrgStat`."""
    nodeId: ID!
  ): OrgStat
  project(id: String!): Project

  """Reads a single `Project` using its globally unique `ID`."""
  projectByNodeId(
    """The globally unique `ID` to be used in selecting a single `Project`."""
    nodeId: ID!
  ): Project @deprecated(reason: "Experimental API, could change at any time. Use with caution.")

  """Reads and enables pagination through a set of `Project`."""
  projects(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Project`."""
    orderBy: [ProjectsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectsConnection @deprecated(reason: "Experimental API, could change at any time. Use with caution.")

  """
  Exposes the root query type nested one level down. This is helpful for Relay 1
  which can only query top level fields if they are in a particular form.
  """
  query: Query!
  snapshot(id: UUID!): Snapshot

  """Reads a single `Snapshot` using its globally unique `ID`."""
  snapshotByNodeId(
    """The globally unique `ID` to be used in selecting a single `Snapshot`."""
    nodeId: ID!
  ): Snapshot

  """Reads and enables pagination through a set of `Snapshot`."""
  snapshots(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SnapshotCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: SnapshotFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Snapshot`."""
    orderBy: [SnapshotsOrderBy!] = [PRIMARY_KEY_ASC]
  ): SnapshotsConnection
  webdriverSessionInfo(input: WebdriverSessionInfoIn!): WebdriverSession
}

type Rect {
  flags: DiffingOption
  height: Int!
  width: Int!
  x: Int!
  y: Int!
}

type Region {
  diffingOptions: DiffingOption
  height: Int!
  name: String
  width: Int!
  x: Int!
  y: Int!
}

input RegionIn {
  diffingOptions: DiffingOptionsIn
  height: Int!
  name: String
  width: Int!
  x: Int!
  y: Int!
}

"""
START_FROM_TOP - scroll before and after to top of the scrollElement
START_FROM_CURRENT_LOCATION - no scroll before and after
"""
enum ScrollOption {
  START_FROM_CURRENT_LOCATION
  START_FROM_TOP
}

input SelectorIn {
  type: SelectorType!
  value: String!
}

enum SelectorType {
  XPATH
}

input SetDiffFeedbackIn {
  diffId: UUID!
  hasIrrelevantChanges: Boolean!
  isBroken: Boolean!
}

input SetDiffStatusIn {
  diffIds: [UUID!]!
  status: UpdateDiffStatus!
}

type Snapshot implements Node {
  appId: String
  appName: String
  appVersion: String

  """Reads and enables pagination through a set of `Baseline`."""
  baselines(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: BaselineCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: BaselineFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Baseline`."""
    orderBy: [BaselinesOrderBy!] = [PRIMARY_KEY_ASC]
  ): BaselinesConnection!
  branch: String
  browser: Browser!
  browserVersion: String

  """Reads a single `Build` that is related to this `Snapshot`."""
  build: Build
  buildId: UUID!
  createdAt: Datetime!
  defaultBranch: String
  device: String
  devicePixelRatio: Float!

  """Reads and enables pagination through a set of `Diff`."""
  diffs(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: DiffCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: DiffFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Diff`."""
    orderBy: [DiffsOrderBy!] = [PRIMARY_KEY_ASC]
  ): DiffsConnection!
  domFormat: DomFormat!

  """
  If not null, it indicates that the snapshot is invalid.
  
  By convention, the following errors exist:
  - `{"code": "TRUNCATED"}`: The image file is corrupt and was probably truncated.
  - `{"code": "IMAGE_TOO_LARGE"}`: The image file exceeds the resolution / filesize limits for the diffing service.
  - `{"code": "INVALID"}`: The image file is invalid or in an unsupported image format.
  - `{"domCode": "DOM_TOO_LARGE"}`: [WARNING] The uploaded DOM is too large.
  - `{"domCode": "DOM_CAPTURE_FAILED"}`: [WARNING] A DOM snapshot was requested, but could not be captured.
  - `{"domCode": "DOM_INVALID"}`: [WARNING] The DOM snapshot has an invalid structure.
  
  Other error types may exist and the frontend should display a generic error message
  together with the JSON contents of `error`.
  """
  error: JSON
  hasDom: Boolean!

  """
  `height` is determined asynchronously and may be null right after snapshot creation.
  """
  height: Int
  id: UUID!
  ignoreRegions: [Region]!
  imageUrl: String!

  """
  URL that is used by the frontend to link to the job, task or process that has generated this snapshot. For exemple, a link to a Sauce Session.
  """
  jobUrl: String
  latestBaseline: Baseline
  metadata: JSON
  name: String!

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  operatingSystem: OperatingSystem!
  operatingSystemVersion: String
  smartSuiteName: String!
  smartTestName: String!
  suiteName: String
  testName: String
  thumbnailUrl: String!
  uploadId: String!
  url: String!
  userAgent: String
  viewportHeight: Int
  viewportWidth: Int

  """
  `width` is determined asynchronously and may be null right after snapshot creation.
  """
  width: Int
}

"""
A condition to be used against `Snapshot` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input SnapshotCondition {
  """Checks for equality with the object’s `buildId` field."""
  buildId: UUID

  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `id` field."""
  id: UUID

  """Checks for equality with the object’s `uploadId` field."""
  uploadId: String
}

"""
A filter to be used against `Snapshot` object types. All fields are combined with a logical ‘and.’
"""
input SnapshotFilter {
  """Filter by the object’s `buildId` field."""
  buildId: UUIDFilter

  """Filter by the object’s `createdAt` field."""
  createdAt: DatetimeFilter

  """Filter by the object’s `id` field."""
  id: UUIDFilter

  """Filter by the object’s `uploadId` field."""
  uploadId: StringFilter
}

input SnapshotFiltersIn {
  browser: [Browser!]
  device: [String!]
  groupBy: [GroupByOption!]
  operatingSystem: [OperatingSystemFilterIn!]
  search: String
}

input SnapshotIn {
  appId: String
  appName: String
  appVersion: String

  """
  One or more overrides for locating the matching baseline. Can be used for cross browser / OS
  visual testing.
  """
  baselineOverride: BaselineOverrideIn
  browser: Browser
  browserVersion: String
  buildId: UUID

  """
  @deprecated Use `buildId`. This field will be removed in a future update.
  """
  buildUuid: UUID
  device: String
  devicePixelRatio: Float
  diffingMethod: DiffingMethod
  diffingOptions: DiffingOptionsIn
  ignoreRegions: [RegionIn!]
  jobUrl: String
  metadata: JSON
  name: String!
  operatingSystem: OperatingSystem
  operatingSystemVersion: String
  suiteName: String
  testName: String
  uploadId: UUID

  """
  @deprecated Use `uploadId`. This field will be removed in a future update.
  """
  uploadUuid: UUID
}

type SnapshotUpload {
  buildId: UUID!
  domUploadUrl: String
  id: UUID!
  imageUploadUrl: String
}

input SnapshotUploadIn {
  buildId: UUID

  """
  @deprecated Use `buildId`. This field will be removed in a future update.
  """
  buildUuid: UUID
}

"""A connection to a list of `Snapshot` values."""
type SnapshotsConnection {
  """
  A list of edges which contains the `Snapshot` and cursor to aid in pagination.
  """
  edges: [SnapshotsEdge!]!

  """A list of `Snapshot` objects."""
  nodes: [Snapshot!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Snapshot` you could get from the connection."""
  totalCount: Int!
}

"""A `Snapshot` edge in the connection."""
type SnapshotsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Snapshot` at the end of the edge."""
  node: Snapshot!
}

"""Methods to use when ordering `Snapshot`."""
enum SnapshotsOrderBy {
  BUILD_ID_ASC
  BUILD_ID_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  ID_ASC
  ID_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  UPLOAD_ID_ASC
  UPLOAD_ID_DESC
}

"""
A filter to be used against String fields. All fields are combined with a logical ‘and.’
"""
input StringFilter {
  """Greater than the specified value."""
  greaterThan: String

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: String

  """Included in the specified list."""
  in: [String!]

  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Less than the specified value."""
  lessThan: String

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: String
}

"""
A universally unique identifier as defined by [RFC 4122](https://tools.ietf.org/html/rfc4122).
"""
scalar UUID

"""
A filter to be used against UUID fields. All fields are combined with a logical ‘and.’
"""
input UUIDFilter {
  """Greater than the specified value."""
  greaterThan: UUID

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: UUID

  """Included in the specified list."""
  in: [UUID!]

  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Less than the specified value."""
  lessThan: UUID

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: UUID
}

input UpdateCommentIn {
  comment: String!
  id: UUID!
}

input UpdateDiffIn {
  id: UUID
  status: UpdateDiffStatus!

  """@deprecated Use `id`. This field will be removed in a future update."""
  uuid: UUID
}

"""See DiffStatus for details."""
enum UpdateDiffStatus {
  APPROVED
  REJECTED
  UNAPPROVED
}

type User {
  id: UUID!
  username: String
}

scalar Void

scalar WebdriverElementID

type WebdriverSession {
  applicationSummary: ApplicationSummary

  """
  Encodes all metadata in an opaque scalar that can be passed to `CreateSnapshotFromWebDriver`.
  """
  blob: WebdriverSessionBlob!
  browser: Browser
  browserVersion: String
  deviceDpr: Float
  deviceName: String
  operatingSystem: OperatingSystem
  operatingSystemVersion: String
}

scalar WebdriverSessionBlob

input WebdriverSessionInfoIn {
  jobId: ID!
  sessionId: ID!
}
